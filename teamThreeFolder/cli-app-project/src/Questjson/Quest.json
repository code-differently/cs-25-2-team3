{
  "questions": [
    {
      "level": "Beginner",
      "scenario": "It’s 12:58 PM on a Monday. You’ve just finished editing your homework files for Mr. Mays’ class. You want to make sure your staged changes are officially saved in your project history so that they can be included in your upcoming pull request. What is the appropriate git command?",
      "options": [
        { "id": "a", "command": "git push" },
        { "id": "b", "command": "git commit" },
        { "id": "c", "command": "git request" }
      ],
      "correct": "b",
      "feedback": {
        "correct": "Great, you Git it!",
        "incorrect": {
          "definition": "Saves staged changes to the local repository with a message describing what was changed.",
          "analogy": "Like sealing your homework folder and writing a note in your personal log about what’s inside.",
          "retry": true
        }
      }
    },
    {
      "level": "Beginner",
      "scenario": "While reviewing your homework, you notice that several files have been modified locally, but none of them are marked to be saved in the repository yet. What is the best way to get them ready for inclusion in the next commit?",
      "options": [
        { "id": "a", "command": "git add" },
        { "id": "b", "command": "git commit" },
        { "id": "c", "command": "git push" }
      ],
      "correct": "a",
      "feedback": {
        "correct": "Lesss Git it!",
        "incorrect": {
          "definition": "Stages changes in your working directory so they will be included in the next commit.",
          "analogy": "Like putting your completed homework papers into a folder so they’re ready to submit.",
          "retry": true
        }
      }
    },
    {
      "level": "Beginner",
      "scenario": "You’re about to start Lesson 02 homework, but the instructor has warned everyone not to make changes directly on the main branch. You need to create a new branch and switch directly into it. Which command do you use?",
      "options": [
        { "id": "a", "command": "git checkout -b" },
        { "id": "b", "command": "git create" },
        { "id": "c", "command": "git merge" }
      ],
      "correct": "a",
      "feedback": {
        "correct": "Git on with ya bad self!",
        "incorrect": {
          "definition": "Creates a new branch and switches to it immediately.",
          "analogy": "Like taking a fresh folder labeled 'Lesson 02 Homework' so you can start your work without disturbing the main class folder.",
          "retry": true
        }
      }
    },
    {
      "level": "Intermediate",
      "scenario": "You just recorded your latest changes in your local project history. You want your GitHub fork to reflect this so you can continue working on other branches. What command should you use?",
      "options": [
        { "id": "a", "command": "git files" },
        { "id": "b", "command": "git commit" },
        { "id": "c", "command": "git push" }
      ],
      "correct": "c",
      "feedback": {
        "correct": "You're pushing greatness! Git on outta here!",
        "incorrect": {
          "definition": "Sends your local commits to a remote repository (e.g., GitHub).",
          "analogy": "Like taking your sealed homework folder and dropping it into Mr. Mays’ main filing cabinet so he can see your updates.",
          "retry": true
        }
      }
    },
    {
      "level": "Intermediate",
      "scenario": "You open your local copy of the repo and realize the main repository has received updates since your last check. Which command ensures your local copy stays in sync without losing your work?",
      "options": [
        { "id": "a", "command": "git push" },
        { "id": "b", "command": "git pull" },
        { "id": "c", "command": "git merge" }
      ],
      "correct": "b",
      "feedback": {
        "correct": "Nicely pulled together! Git it done!",
        "incorrect": {
          "definition": "Fetches and integrates changes from a remote repository into your current branch.",
          "analogy": "Like checking Mr. Mays’ main folder and adding any new homework papers to your own copy so you stay up to date.",
          "retry": true
        }
      }
    },
    {
      "level": "Advanced",
      "scenario": "You’ve finished editing files on one branch and committed your work. Now you want to fix a bug in a different branch. Which command allows you to switch branches safely?",
      "options": [
        { "id": "a", "command": "git checkout <other-branch>" },
        { "id": "b", "command": "git add <other-branch>" },
        { "id": "c", "command": "git push <other-branch>" }
      ],
      "correct": "a",
      "feedback": {
        "correct": "Exactly! You really git’n the hang of this!",
        "incorrect": {
          "definition": "Switches your working directory to another branch so you can see or continue work there.",
          "analogy": "Like closing one notebook after finishing some notes and opening another notebook to review a different subject.",
          "retry": true
        }
      }
    },
    {
      "level": "Advanced",
      "scenario": "You accidentally deleted your local copy of your forked repo. Luckily, it still exists on GitHub. Which command allows you to get a fresh copy and continue working?",
      "options": [
        { "id": "a", "command": "git fetch" },
        { "id": "b", "command": "git pull" },
        { "id": "c", "command": "git clone <repo-url>" }
      ],
      "correct": "c",
      "feedback": {
        "correct": "Git in the zone and crush it!",
        "incorrect": {
          "definition": "Creates a local copy of a remote repository.",
          "analogy": "Like getting a fresh copy of the class folder from Mr. Mays if your local one got lost, so you can keep working independently.",
          "retry": true
        }
      }
    },
    {
      "level": "Advanced",
      "scenario": "Mr. Mays wants to make sure a student's commits are applied on top of the latest main branch updates before merging. Which command keeps the project history clean?",
      "options": [
        { "id": "a", "command": "git applied" },
        { "id": "b", "command": "git rebase main" },
        { "id": "c", "command": "git pull" }
      ],
      "correct": "b",
      "feedback": {
        "correct": "Git up, git learning, git awesome!",
        "incorrect": {
          "definition": "Moves your commits on top of the latest changes from another branch to keep the history clean.",
          "analogy": "Like making sure your homework is added on top of the latest class notes before combining it into the main folder, so nothing gets mixed up or duplicated.",
          "retry": true
        }
      }
    },
    {
      "level": "Intermediate",
      "scenario": "You want to review the history of commits in your repository to see what changes have been made. Which git command will show you a list of commits?",
      "options": [
        { "id": "a", "command": "git clone" },
        { "id": "b", "command": "git history" },
        { "id": "c", "command": "git log" }
      ],
      "correct": "c",
      "feedback": {
        "correct": "Looking back never felt so good! Lesss git it!",
        "incorrect": {
          "definition": "Displays a list of commits in the repository, showing the history of changes.",
          "analogy": "Like flipping through your completed homework folders to see what you submitted and when.",
          "retry": true
        }
      }
    }
  ]
}

